import java.text.SimpleDateFormat

buildscript {

    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/drummer-aidan/maven' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
        classpath 'com.testdroid:gradle:1.3.0'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.3'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'testdroid'

repositories {

    jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

task printProps << {

    println 'Printing properties: '
    println android_keystore
    println android_keystore_password
    println android_key_alias
    println android_key_password

}

dependencies {

    // App's dependencies, including test
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':android-proxy-library')

    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'

    compile 'com.google.android.gms:play-services-base:7.5.0'
    compile 'com.google.android.gms:play-services-analytics:7.5.0'

    compile 'com.google.code.gson:gson:2.3.1'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true
    }

    compile 'com.jakewharton.timber:timber:3.1.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.github.gabrielemariotti.changeloglib:library:1.5.2'
    compile 'com.github.machinarius:preferencefragment:0.1.1'
    compile 'com.afollestad:material-dialogs:0.7.6.0'
    compile 'com.nispok:snackbar:2.10.10'
    compile 'com.jpardogo.materialtabstrip:library:1.0.9'
    compile 'com.github.paolorotolo:appintro:3.1.0'

    // Testing dependencies
    compile 'com.android.support:support-annotations:22.2.0'    // Required by Espresso

    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.10'
}

allprojects {
    // show deprecation warnings for all projects
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
        options.compilerArgs << "-Xlint:unchecked"
    }
}

android {

    println("JAVA version: " + org.gradle.internal.jvm.Jvm.current())
    println("GRADLE version: " + getGradle().getGradleVersion())

    compileSdkVersion 22
    buildToolsVersion '22.0.1'

//    Scheme for version codes: ##@@$$$%% , using:
//    ##   - the first two digits for the API Level,
//    @@   - the second and third digits for the minimum and maximum screen size
//           (1 - 4 indicating each of the four sizes) or to denote the texture formats
//
///          the last five digits are for the app version:
//    $$$  - three digits for major version (the user will see only the major version)
///   %%   - two digits for minor version

    defaultConfig {

        minSdkVersion 15
        targetSdkVersion 22
        versionCode 130032000
        versionName "3.1"

        applicationId "com.lechucksoftware.proxy.proxysettings"

        testApplicationId "com.lechucksoftware.proxy.proxysettings.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        testHandleProfiling true
        testFunctionalTest true
    }

    dexOptions {
        incremental true
        preDexLibraries false
        javaMaxHeapSize "2g"
    }

    signingConfigs {
        release
    }

    sourceSets {

        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        androidTest {
            java.srcDirs = ['src/androidTest/java']
        }
    }

    productFlavors {

        Play {
            buildConfigField "String", "MARKET_URI", "\"com.android.vending\""
        }

        Amazon {
            buildConfigField "String", "MARKET_URI", "\"com.amazon.venezia\""
        }
    }

    buildTypes {

        release {

            minifyEnabled true
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            debuggable false

            buildConfigField "String", "ANALYTICS_TRACK_ID", "\"" + (project.hasProperty('analytics_track_id_release') ? analytics_track_id_release : 1234)  + "\""
            buildConfigField "String", "PLAY_IN_APP_BILLING_PUBLIC_KEY", "\"" + (project.hasProperty('in_app_billing_public_key') ? in_app_billing_public_key : 0)  + "\""

            signingConfig project.hasProperty('android_keystore') ? signingConfigs.release : signingConfigs.debug
        }

        debug {

            minifyEnabled false
            shrinkResources false

            debuggable true

            versionNameSuffix "-DEBUG"

            buildConfigField "String", "ANALYTICS_TRACK_ID", "\"" + (project.hasProperty('analytics_track_id_debug') ? analytics_track_id_debug : 1234)  + "\""
            buildConfigField "String", "PLAY_IN_APP_BILLING_PUBLIC_KEY", "\"" + (project.hasProperty('in_app_billing_public_key') ? in_app_billing_public_key : 0)  + "\""
        }

        CI {

            debuggable true
            shrinkResources false

            minifyEnabled false

            versionNameSuffix "-CI"

            buildConfigField "String", "ANALYTICS_TRACK_ID", 'null'
            buildConfigField "String", "PLAY_IN_APP_BILLING_PUBLIC_KEY", 'null'
            ext.enableCrashlytics = false
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace(".apk", "-" + defaultConfig.versionCode + ".apk"))
        }
    }

    if (project.hasProperty('android_keystore') &&
            project.hasProperty('android_keystore_password') &&
            project.hasProperty('android_key_alias') &&
            project.hasProperty('android_key_password')) {

        println 'Signing config values succesfully found'
        println 'android_keystore: ' + android_keystore
        println 'android_keystore_password: ' + android_keystore_password
        println 'android_key_alias: ' + android_key_alias
        println 'android_key_password: ' + android_key_password

        android.signingConfigs.release.storeFile = file(android_keystore)
        android.signingConfigs.release.storePassword = android_keystore_password
        android.signingConfigs.release.keyAlias = android_key_alias
        android.signingConfigs.release.keyPassword = android_key_password

    } else {

        println 'Signing config values not found'
        buildTypes.release.signingConfig = null
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
    }
}

afterEvaluate {
    apply plugin: 'spoon'
    spoon {
        debug = true;
    }
}

testdroid {

    if (project.hasProperty('testDroidUsername') &&
        project.hasProperty('testDroidPassword')) {

        println 'Testdroid config values succesfully found'
        println 'testDroidUsername: ' + testDroidUsername
        println 'testDroidUsername: ' + testDroidPassword

        username testDroidUsername
        password testDroidPassword

    } else {

        println 'Testdroid config values not found'

        username ""
        password ""
    }

    projectName "Proxy Settings"
    testRunName "BUILD " + android.defaultConfig.versionCode + " - " + new SimpleDateFormat("yyyy-mm-dd hh:mm:ss").format(new Date())  //optional - default: build variant name
    deviceGroup 'FREE_DEVICES'

    // optional - Custom settings for test execution
    fullRunConfig {
        instrumentationRunner = android.defaultConfig.testInstrumentationRunner //  "com.android.testRunner"
//        withAnnotation = "com.my.annotation"
//        withOutAnnotation = "com.my.not.annotation"
//        limitationType = "CLASS"
//        limitationValue = "foo.bar"
//        instrumentationAPKPath = "/tmp/mytesti.apk" //optional - custom instrumentation apk path
    }


    mode "FULL_RUN" //FULL_RUN / APP_CRAWLER / UI_AUTOMATOR
//    mode "APP_CRAWLER" //FULL_RUN / APP_CRAWLER / UI_AUTOMATOR
}
